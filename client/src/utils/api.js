export const fetchConvertedAmount = async (
  fromCurrency,
  toCurrency,
  amount
) => {
  try {
    const response = await fetch(
      `/api/exchange-rates?from=${fromCurrency}&to=${toCurrency}`
    );

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç");
    }

    const data = await response.json();
    const rate = parseFloat(data.rate); // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞

    if (!rate || isNaN(rate) || rate <= 0) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞", rate);
      return amount; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }

    const convertedAmount = parseFloat((parseFloat(amount) * rate).toFixed(6));

    console.log(
      `üí± ${amount} ${fromCurrency} ‚Üí ${convertedAmount} ${toCurrency} (–ö—É—Ä—Å: ${rate})`
    );

    console.log(
      `üí± –ö—É—Ä—Å ${fromCurrency} ‚Üí ${toCurrency}: ${rate}, –°—É–º–º–∞: ${amount}, –ò—Ç–æ–≥: ${convertedAmount}`
    );

    console.log("üü° –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø:", {
      fromCurrency,
      toCurrency,
      –∏—Å—Ö–æ–¥–Ω–∞—è_—Å—É–º–º–∞: amount,
      –∫—É—Ä—Å: rate,
      –∏—Ç–æ–≥–æ–≤–∞—è_—Å—É–º–º–∞: convertedAmount,
    });

    return convertedAmount; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∂–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", error);
    return amount; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—É –∂–µ —Å—É–º–º—É
  }
};

export const withdrawFromGoal = async (goalId, amount) => {
  try {
    console.log("üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç:", { goalId, amount });

    const response = await fetch(`/api/goals/${goalId}/withdraw`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
      body: JSON.stringify({ amount }),
    });

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤");
    }

    return await response.json();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤:", error);
    throw error;
  }
};

export const fetchTransactions = async () => {
  try {
    const token = localStorage.getItem("token");
    const response = await fetch("http://localhost:5000/api/transactions", {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
    });

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
    }

    return await response.json();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", error);
    return [];
  }
};

export const createTransaction = async (
  amount,
  fromCurrency,
  toCurrency,
  type
) => {
  try {
    const token = localStorage.getItem("token");
    const response = await fetch("http://localhost:5000/api/transactions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({
        amount,
        fromCurrency,
        toCurrency,
        type,
      }),
    });

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    }

    return await response.json();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
    throw error;
  }
};
