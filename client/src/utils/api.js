export const fetchConvertedAmount = async (
  fromCurrency,
  toCurrency,
  amount
) => {
  try {
    const response = await fetch(
      `/api/exchange-rates?from=${fromCurrency}&to=${toCurrency}`
    );

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç");
    }

    const data = await response.json();
    const rate = parseFloat(data.rate); // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞

    if (!rate || isNaN(rate) || rate <= 0) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞", rate);
      return parseFloat(amount); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—É –∂–µ —Å—É–º–º—É, –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–µ–≤–µ—Ä–Ω—ã–π
    }

    console.log(
      `üí± –ö—É—Ä—Å ${fromCurrency} ‚Üí ${toCurrency}: ${rate}, –°—É–º–º–∞: ${amount}, –ò—Ç–æ–≥: ${
        parseFloat(amount) * rate
      }`
    );

    return parseFloat(amount) * rate; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—É–º–º—ã
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", error);
    return parseFloat(amount); // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—É –∂–µ —Å—É–º–º—É (—á—Ç–æ–±—ã –Ω–µ –æ–±–Ω—É–ª—è—Ç—å)
  }
};

export const withdrawFromGoal = async (goalId, amount) => {
  try {
    const response = await fetch(`/api/goals/${goalId}/withdraw`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
      body: JSON.stringify({ amount }),
    });

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤");
    }

    return await response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤:", error);
    throw error;
  }
};
