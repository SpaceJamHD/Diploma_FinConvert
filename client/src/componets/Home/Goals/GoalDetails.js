import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import ChartTabs from "../Charts/ChartTabs";
import "../../../styles/goalDetails.css";
import "../../../styles/bootstrap/css/bootstrap.min.css";

const GoalDetails = () => {
  const { goalId } = useParams();
  const [goal, setGoal] = useState(null);
  const [transactions, setTransactions] = useState([]);
  const [balances, setBalances] = useState({});
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ ChartTabs:");
  console.log("üéØ –¶–µ–ª—å:", goal);
  console.log("üìú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", transactions);
  console.log("üí∞ –ë–∞–ª–∞–Ω—Å:", balances);

  useEffect(() => {
    console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª—å —Å ID:", goalId);

    const fetchDetails = async () => {
      try {
        const token = localStorage.getItem("token");

        const [goalResponse, transactionsResponse, balancesResponse] =
          await Promise.all([
            fetch(`/api/goals/${goalId}`, {
              headers: { Authorization: `Bearer ${token}` },
            }),
            fetch(`/api/transactions/${goalId}`, {
              headers: { Authorization: `Bearer ${token}` },
            }),
            fetch(`/api/balances`, {
              headers: { Authorization: `Bearer ${token}` },
            }),
          ]);

        if (
          !goalResponse.ok ||
          !transactionsResponse.ok ||
          !balancesResponse.ok
        ) {
          throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
        }

        const goalData = await goalResponse.json();
        const transactionsData = await transactionsResponse.json();
        const balancesData = await balancesResponse.json();

        setGoal(goalData);
        setTransactions(
          transactionsData.map((t) => ({
            ...t,
            amount: parseFloat(t.amount),
          }))
        );
        setBalances(balancesData); // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      } catch (err) {
        console.error(err);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏.");
      } finally {
        setIsLoading(false);
      }
    };

    if (!goalId) {
      console.error("‚ùå –û—à–∏–±–∫–∞: `goalId` –ø—É—Å—Ç–æ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ!");
      return;
    }
    console.log("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º `goalId` –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º:", goalId);

    fetchDetails();
  }, [goalId]);

  if (isLoading) {
    return <div style={{ color: "#fff" }}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
  }

  if (error) {
    return <div style={{ color: "#fff" }}>{error}</div>;
  }

  if (!goal) {
    return <div style={{ color: "#fff" }}>–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</div>;
  }

  return (
    <main className="container mb-5">
      <section className="goal-details-grid">
        <div className="goal-field">
          –¶–µ–ª—å: {goal.amount} {goal.currency}
        </div>
        <h1 className="goal-title">{goal.name}</h1>
        <div className="goal-field">
          –ë–∞–ª–∞–Ω—Å: {goal.balance} {goal.currency}
        </div>
        <p className="goal-description">{goal.description}</p>
      </section>

      <section className="chart-section mt-4">
        <ChartTabs
          transactions={transactions}
          goal={goal}
          balances={balances}
        />
      </section>

      <section className="transaction-history mt-4">
        <h3>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>
        <div className="transaction-table-wrapper">
          <table className="table table-dark table-striped">
            <thead>
              <tr>
                <th>–î–∞—Ç–∞</th>
                <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                <th>–¢–∏–ø</th>
                <th>–°—É–º–º–∞</th>
              </tr>
            </thead>
            <tbody>
              {transactions.length === 0 ? (
                <tr>
                  <td colSpan="4" className="text-center text-light">
                    –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
                  </td>
                </tr>
              ) : (
                transactions.map((t) => (
                  <tr
                    key={t.id}
                    className={
                      t.type === "income" ? "table-success" : "table-danger"
                    }
                  >
                    <td>{new Date(t.date).toLocaleDateString("ru-RU")}</td>
                    <td className="text-truncate">
                      {t.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}
                    </td>
                    <td>{t.type === "income" ? "–î–æ—Ö–æ–¥" : "–†–∞—Å—Ö–æ–¥"}</td>
                    <td>
                      {t.amount.toFixed(2)} {goal.currency}
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </section>
    </main>
  );
};

export default GoalDetails;
