const generateGoalPriorityAdvice = (goals = []) => {
  const advice = new Map();

  if (!Array.isArray(goals) || goals.length === 0) return [];

  const lowPriorityGoals = goals.filter(
    (goal) => goal.priority === "–ù–∏–∑—å–∫–∏–π" && goal.balance > 0
  );

  const mediumPriorityGoals = goals.filter(
    (goal) => goal.priority === "–°–µ—Ä–µ–¥–Ω—ñ–π" && goal.balance > 0
  );

  const highPriorityGoals = goals.filter((goal) => goal.priority === "–í–∏—Å–æ–∫–∏–π");

  const highNotFunded = highPriorityGoals.filter(
    (goal) => parseFloat(goal.balance || 0) < parseFloat(goal.amount || 0) * 0.3
  );

  const totalLowBalance = lowPriorityGoals.reduce(
    (sum, g) => sum + parseFloat(g.balance || 0),
    0
  );

  const totalHighMissing = highNotFunded.reduce(
    (sum, g) => sum + (parseFloat(g.amount || 0) - parseFloat(g.balance || 0)),
    0
  );

  // üí° –¢–µ–ø–µ—Ä—å —É–∂–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
  if (
    mediumPriorityGoals.length > 0 &&
    highNotFunded.length > 0 &&
    totalLowBalance > 0
  ) {
    advice.set("priority-imbalance", {
      id: "priority-imbalance",
      text: "–§—ñ–Ω–∞–Ω—Å—É—é—Ç—å—Å—è —Å–µ—Ä–µ–¥–Ω—ñ —Ü—ñ–ª—ñ, —Ö–æ—á–∞ –≤–∏—Å–æ–∫–æ–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ —â–µ –Ω–µ –º–∞—é—Ç—å –¥–æ—Å—Ç–∞—Ç–Ω—å–æ–≥–æ —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏.",
      type: "warning",
      category: "goals",
    });
  }

  if (totalLowBalance > 0 && totalLowBalance > totalHighMissing * 1.2) {
    advice.set("low-priority-overfunding", {
      id: "low-priority-overfunding",
      text: `–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∫–æ—à—Ç—ñ–≤ (${totalLowBalance.toFixed(
        2
      )} –≥—Ä–Ω) –∑–æ—Å–µ—Ä–µ–¥–∂–µ–Ω–æ –Ω–∞ —Ü—ñ–ª—è—Ö –∑ –Ω–∏–∑—å–∫–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º ‚Äî —Ä–æ–∑–≥–ª—è–Ω—å—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –≤–∞–∂–ª–∏–≤—ñ—à—ñ —Ü—ñ–ª—ñ.`,
      type: "warning",
      category: "goals",
    });
  }

  if (
    highPriorityGoals.length > 0 &&
    highNotFunded.length === highPriorityGoals.length
  ) {
    advice.set("high-priority-neglected", {
      id: "high-priority-neglected",
      text: "–ñ–æ–¥–Ω–∞ –∑ –≤–∞—à–∏—Ö –≤–∏—Å–æ–∫–æ–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö —Ü—ñ–ª–µ–π –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å—É—î—Ç—å—Å—è ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ä–æ–∑–ø–æ–¥—ñ–ª –∫–æ—à—Ç—ñ–≤.",
      type: "alert",
      category: "goals",
    });
  }

  return Array.from(advice.values());
};

export default generateGoalPriorityAdvice;
