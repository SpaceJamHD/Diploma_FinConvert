const pool = require("../models/userModel");
const {
  getExchangeRate,
  getCryptoToFiatRate,
} = require("../utils/exchangeRates");

const getGoals = async (req, res) => {
  try {
    const userId = req.user.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const results = await pool.query("SELECT * FROM goals WHERE user_id = $1", [
      userId,
    ]);
    res.json(results.rows); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const addGoal = async (req, res) => {
  const { name, amount, description, deadline, priority, currency } = req.body;
  const userId = req.user.id;

  try {
    const result = await pool.query(
      "INSERT INTO goals (user_id, name, description, amount, balance, deadline, priority, currency) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *",
      [userId, name, description, amount, 0, deadline, priority, currency]
    );

    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const updateGoal = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, amount, balance, priority, deadline, currency } =
      req.body;
    const result = await pool.query(
      "UPDATE goals SET name = $1, description = $2, amount = $3, balance = $4, priority = $5, deadline = $6, currency = $7 WHERE id = $8 RETURNING *",
      [name, description, amount, balance, priority, deadline, currency, id]
    );
    res.json(result.rows[0]);
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const deleteGoal = async (req, res) => {
  try {
    const { id } = req.params;
    await pool.query("DELETE FROM goals WHERE id = $1", [id]);
    res.status(204).send();
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const addBalanceToGoal = async (req, res) => {
  const { id } = req.params; // ID —Ü–µ–ª–∏
  const { amount, fromCurrency } = req.body; // –°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–∞–ª—é—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–π —Å–ø–∏—Å—ã–≤–∞—Ç—å
  const userId = req.user.id;

  try {
    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å
    const goal = await pool.query(
      "SELECT * FROM goals WHERE id = $1 AND user_id = $2",
      [id, userId]
    );

    if (!goal.rows.length) {
      return res.status(404).json({ message: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    const goalCurrency = goal.rows[0].currency; // –í–∞–ª—é—Ç–∞ —Ü–µ–ª–∏
    let finalAmount = parseFloat(amount); // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const balanceResult = await pool.query(
      "SELECT currency, amount FROM balances WHERE user_id = $1",
      [userId]
    );

    const balances = {};
    balanceResult.rows.forEach(({ currency, amount }) => {
      balances[currency] = parseFloat(amount);
    });

    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∞–ª—é—Ç–µ —Ü–µ–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º
    if (fromCurrency === goalCurrency) {
      if (balances[fromCurrency] < finalAmount) {
        return res.status(400).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" });
      }
      await updateBalance(userId, fromCurrency, finalAmount, "withdraw");
    } else {
      // üîÑ –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
      const exchangeRate = await getExchangeRate(fromCurrency, goalCurrency);
      if (!exchangeRate || isNaN(exchangeRate) || exchangeRate <= 0) {
        return res
          .status(400)
          .json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç" });
      }

      finalAmount = parseFloat(amount) * exchangeRate;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
      if (balances[fromCurrency] < amount) {
        return res.status(400).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" });
      }

      // ‚úÖ –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç–µ
      await updateBalance(userId, fromCurrency, amount, "withdraw");
    }

    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ü–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º–æ–π
    const updatedGoal = await pool.query(
      "UPDATE goals SET balance = balance + $1 WHERE id = $2 RETURNING balance",
      [finalAmount, id]
    );

    // ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query(
      "INSERT INTO transactions (user_id, goal_id, amount, type, date, description) VALUES ($1, $2, $3, $4, NOW(), $5)",
      [userId, id, finalAmount, "income", "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏"]
    );

    res.json({ updatedBalance: updatedGoal.rows[0].balance });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const withdrawFromGoal = async (req, res) => {
  const { id } = req.params; // ID —Ü–µ–ª–∏
  const { amount } = req.body; // –°—É–º–º–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è
  const userId = req.user.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å
    const goal = await pool.query(
      "SELECT * FROM goals WHERE id = $1 AND user_id = $2",
      [id, userId]
    );

    if (!goal.rows.length) {
      return res.status(404).json({ message: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    const currentBalance = parseFloat(goal.rows[0].balance);
    if (currentBalance < amount) {
      return res.status(400).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ü–µ–ª–∏" });
    }

    const newBalance = currentBalance - amount;

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –≤ –∫–æ—à–µ–ª–µ–∫
    await updateBalance(userId, goal.rows[0].currency, amount, "deposit");

    // ‚ùå –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ü–µ–ª–∏
    await pool.query(
      "UPDATE goals SET balance = $1 WHERE id = $2 RETURNING balance",
      [newBalance, id]
    );

    res.json({ message: "–î–µ–Ω—å–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã", newGoalBalance: newBalance });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const updateBalance = async (userId, currency, amount, operation) => {
  try {
    const balance = await pool.query(
      "SELECT amount FROM balances WHERE user_id = $1 AND currency = $2",
      [userId, currency]
    );

    if (balance.rows.length === 0) {
      throw new Error("–ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    let newAmount =
      operation === "withdraw"
        ? balance.rows[0].amount - amount // ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
        : balance.rows[0].amount + amount; // ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å

    if (newAmount < 0) {
      throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ");
    }

    await pool.query(
      "UPDATE balances SET amount = $1 WHERE user_id = $2 AND currency = $3",
      [newAmount, userId, currency]
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
    throw error;
  }
};

const getGoalById = async (req, res) => {
  const { id } = req.params;
  const userId = req.user.id;

  try {
    const result = await pool.query(
      "SELECT * FROM goals WHERE id = $1 AND user_id = $2",
      [id, userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json(result.rows[0]);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

module.exports = {
  getGoals,
  addGoal,
  updateGoal,
  deleteGoal,
  addBalanceToGoal,
  withdrawFromGoal,
  updateBalance,
  getGoalById,
};
