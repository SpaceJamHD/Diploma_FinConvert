const fetch = require("node-fetch");

const getExchangeRate = async (fromCurrency, toCurrency) => {
  try {
    console.log(` –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞: ${fromCurrency} ‚Üí ${toCurrency}`);

    const apiKey = process.env.FIXER_API_KEY;
    const fixerUrl = `http://data.fixer.io/api/latest?access_key=${apiKey}`;

    const response = await fetch(fixerUrl);
    const data = await response.json();

    if (!data.success) {
      console.error(" –û—à–∏–±–∫–∞ Fixer API:", data.error);
      return null;
    }

    const rates = data.rates;
    if (!rates[fromCurrency] || !rates[toCurrency]) {
      console.error(" –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –∫—É—Ä—Å –≤–∞–ª—é—Ç", {
        fromCurrency,
        toCurrency,
      });
      return null;
    }

    const finalRate = rates[toCurrency] / rates[fromCurrency];

    console.log(`üí± –ö—É—Ä—Å ${fromCurrency} ‚Üí ${toCurrency}: ${finalRate}`);
    return parseFloat(finalRate.toFixed(6));
  } catch (error) {
    console.error(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç:", error);
    return null;
  }
};

const getCryptoToFiatRate = async (fromCurrency, toCurrency, amount) => {
  const fixerApiUrl = `http://data.fixer.io/api/latest?access_key=${process.env.FIXER_API_KEY}`;
  const coinGeckoApiUrl = `https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd,eur,uah`;

  try {
    const [cryptoResponse, fiatResponse] = await Promise.all([
      fetch(coinGeckoApiUrl),
      fetch(fixerApiUrl),
    ]);

    const cryptoRates = await cryptoResponse.json();
    const fiatRates = await fiatResponse.json();

    if (!cryptoRates || !fiatRates) {
      throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç");
    }

    if (fromCurrency === "BTC" || toCurrency === "BTC") {
      if (fromCurrency === "BTC") {
        const rate = cryptoRates.bitcoin[toCurrency.toLowerCase()];
        if (!rate) throw new Error(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª—é—Ç—ã: ${toCurrency}`);
        return parseFloat(amount) * rate;
      } else {
        const rate = cryptoRates.bitcoin[fromCurrency.toLowerCase()];
        if (!rate) throw new Error(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª—é—Ç—ã: ${fromCurrency}`);
        return parseFloat(amount) / rate;
      }
    } else {
      const fromRate = fiatRates.rates[fromCurrency];
      const toRate = fiatRates.rates[toCurrency];
      const eurBaseRate = fiatRates.rates["EUR"];

      if (!fromRate || !toRate || !eurBaseRate) {
        throw new Error(
          `–û—à–∏–±–∫–∞: –ö—É—Ä—Å—ã ${fromCurrency} –∏–ª–∏ ${toCurrency} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`
        );
      }

      const fromToEur = fromRate / eurBaseRate;
      const toToEur = toRate / eurBaseRate;
      const finalRate = toToEur / fromToEur;

      return parseFloat(amount) * finalRate;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:", error);
    return null;
  }
};

module.exports = { getExchangeRate, getCryptoToFiatRate };
